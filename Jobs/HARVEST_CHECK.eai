#IFDEF GLOBAL
  unit secondmine = null
  unit savewisp = null
#ELSE
function PeonMineCheck takes unit mine returns boolean
  local group g = CreateGroup()
  local group tempg = null
  local location unitloc = GetUnitLoc(mine)
  local unit u = null
  local integer i = 0
  local integer delaywisps = ver_optimal_gold - 1
  call DisplayToAllJobDebug("HARVEST CHECK Job Start")
  if TownCountDone(racial_peon) > 6 then
    set delaywisps = ver_optimal_gold
  endif
  if race_manual_loading then
    if TownCountDone(racial_peon) < 8 and not hero_built[1] then
      set delaywisps = delaywisps - 1
    endif
    call GroupEnumUnitsOfPlayer(g, ai_player, null)
    set g = SelectUnittype(g, UNIT_TYPE_PEON, true)
    set g = SelectByAlive(g, true)
    loop
      set u = FirstOfGroup(g)
      exitwhen u == null
      if IsUnitInTransport(u, mine) then
        set i = i + 1
        //call RecycleGuardPosition(u)
        if savewisp == null or not UnitAlive(savewisp) then
          set savewisp = u
        endif
      endif
      call GroupRemoveUnit(g, u)
    endloop
    if FoodSpace() <= 0 and i >= 3 then  // no foodspace , no peon(at least keep 2 harvest mine) , need one harvest mine peon build Farms
      if TownCount(racial_peon) == TownCountDone(racial_peon) and TownCount(racial_peon) > 1 and TownCount(racial_peon) <= delaywisps then
        set delaywisps = 2
        call IssueTargetOrder(mine, "unload", u)
      endif
    endif
    if i < delaywisps then
      call GroupEnumUnitsOfPlayer(g, ai_player, null)
      set g = SelectById(g, old_id[race_manual_loading_wisp], true)
      set g = SelectByLoaded(g, false)
      call GroupRemoveUnit(g, savewisp)
      set tempg = CopyGroup(g)
      call DestroyGroup(g)
      set g = GetNearestSubGroupOfGroup(tempg, unitloc, delaywisps - i)
      //call GroupRemoveGuardPositionInstant(g) // this gets wisps to come off the trees.
      call GroupTargetOrder(g, "harvest", mine)
    endif
  elseif race_uses_mine_expansion then
    if TownCountDone(racial_peon) >= 5 then
      set delaywisps = ver_optimal_gold
    endif
    call GroupEnumUnitsOfPlayer(g, ai_player, null)
    set g = SelectUnittype(g, UNIT_TYPE_PEON, true)
    set g = SelectByAlive(g, true)
    set g = SelectByHidden(g, false)
    set tempg = CreateGroup()  // just excrete
    loop
      set u = FirstOfGroup(g)
      exitwhen u == null or i == delaywisps
      if GetUnitCurrentOrder(u) == OrderId("harvest") and DistanceBetweenUnits(u,mine) < 225 then  // UD harvest gold max Distance is 221
        set i = i + 1
      elseif GetUnitCurrentOrder(u) == 0 and not IsUnitBuying(u) and not IsUnitInGroup(u, unit_zepplin_move) then
        call IssueTargetOrder(u, "harvest", mine)
      endif
      call GroupRemoveUnit(g, u)
    endloop
  else //human and orc
    call GroupEnumUnitsOfPlayer(g, ai_player, null)
    set g = SelectUnittype(g, UNIT_TYPE_PEON, true)
    set g = SelectByAlive(g, true)
    set g = SelectByHidden(g, false)
    set tempg = CopyGroup(g)
    call DestroyGroup(g)
    set g = GetNearestSubGroupOfGroup(tempg, home_location, 10)
    loop
      set u = FirstOfGroup(g)
      exitwhen u == null or i == delaywisps
      if UnitAlive(u) and (GetUnitCurrentOrder(u) == 0 or GetUnitCurrentOrder(u) == OrderId("harvest")) and not IsUnitBuying(u) and not IsUnitInGroup(u, unit_zepplin_move) then  // no get other order peon , maybe the peon go buy unit or build some
        call IssueTargetOrder(u, "harvest", mine)
      endif
      call GroupRemoveUnit(g, u)
      set i = i + 1
    endloop
    set i = delaywisps  //human and orc no need full
  endif
  call RemoveLocation(unitloc)
  set unitloc = null
  call DestroyGroup(tempg)
  set tempg = null
  call DestroyGroup(g)
  set g = null
  set u = null
  return i < delaywisps
endfunction

function HarvestCheckJob takes nothing returns nothing
  local group g = null
  local unit u = null
  local integer i = 0
  local boolean mines_not_full = true
  //  call DisplayToAll("Harvest Start")
  if not race_manual_loading and first_town_mine != 1 then
    return  // harvest not like ELF and startloc no more mine
  endif
  set g = CreateGroup()
  if race_manual_loading then
    call GroupEnumUnitsOfPlayer(g, ai_player, null)
    set g = SelectNumberOfId(g, 100,  old_id[race_manual_loading_mine])
  elseif race_uses_mine_expansion and not TownThreatened() then
    call GroupEnumUnitsInRangeOfLoc(g, home_location, 1500, null)
    set g = SelectByPlayer(g, ai_player, true)
    set g = SelectById(g, old_id[racial_expansion], true)
  elseif GetResourceAmount(secondmine) <= 0 and not TownThreatened() and TownCountDone(racial_peon) > 10 then  //human and orc
    call GroupEnumUnitsInRangeOfLoc(g, home_location, 1500, null)
    call GroupRemoveUnit(g,own_town_mine[0])
    set g = SelectById(g, old_id[GOLD_MINE], true)
    loop
      set u = FirstOfGroup(g)
      exitwhen u == null
      if GetResourceAmount(u) > i then  // find Resource max mine
        set i = GetResourceAmount(u)
        set secondmine = u
      endif
      call GroupRemoveUnit(g, u)
    endloop
    call GroupAddUnit(g, secondmine)  // only first take secondmine run PeonMineCheck , Prevention have more peon harvest
  endif
  loop
    set u = FirstOfGroup(g)
    exitwhen u == null
    if UnitAlive(u) then
      set mines_not_full = PeonMineCheck(u) and mines_not_full
    endif
    call GroupRemoveUnit(g, u)
  endloop
  call DestroyGroup(g)
  set g = null
  if mines_not_full then
    call TQAddJob(20 - R2I(first_town_mine / 2) * 6, HARVEST_CHECK, 0)  // first_town_mine have 0 , 1 , 2 , first_town_mine / 2 is 0 , 0.5 , 1
  else
    call TQAddJob(80 - R2I(first_town_mine / 2) * 40, HARVEST_CHECK, 0)
  endif
endfunction
#ENDIF